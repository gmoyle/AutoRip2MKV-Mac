name: Release

on:
  push:
    tags:
      - 'v*'  # Only trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering for testing

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  build-and-release:
    name: Build and Release
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: Run Tests
      run: swift test
    
    - name: Build Release Binary
      run: |
        swift build -c release --arch arm64 --arch x86_64
    
    - name: Create macOS App Bundle
      run: |
        mkdir -p "AutoRip2MKV.app/Contents/MacOS"
        mkdir -p "AutoRip2MKV.app/Contents/Resources"
        
        # Copy binary
        cp .build/apple/Products/Release/AutoRip2MKV-Mac "AutoRip2MKV.app/Contents/MacOS/"
        
        # Create Info.plist
        cat > "AutoRip2MKV.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>AutoRip2MKV-Mac</string>
            <key>CFBundleIdentifier</key>
            <string>com.gmoyle.autorip2mkv</string>
            <key>CFBundleName</key>
            <string>AutoRip2MKV</string>
            <key>CFBundleDisplayName</key>
            <string>AutoRip2MKV for Mac</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ steps.get_version.outputs.VERSION_NUMBER }}</string>
            <key>CFBundleVersion</key>
            <string>${{ steps.get_version.outputs.VERSION_NUMBER }}</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleSignature</key>
            <string>????</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
        </dict>
        </plist>
        EOF
    
    - name: Create DMG
      run: |
        # Create a temporary directory for DMG contents
        mkdir dmg_contents
        cp -R AutoRip2MKV.app dmg_contents/
        
        # Create symlink to Applications folder
        ln -s /Applications dmg_contents/Applications
        
        # Create DMG
        hdiutil create -volname "AutoRip2MKV ${{ steps.get_version.outputs.VERSION }}" \
          -srcfolder dmg_contents \
          -ov -format UDZO \
          "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}.dmg"
    
    - name: Create ZIP Archive
      run: |
        zip -r "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}.zip" AutoRip2MKV.app
    
    - name: Generate checksums
      run: |
        shasum -a 256 "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}.dmg" > checksums.txt
        shasum -a 256 "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}.zip" >> checksums.txt
        cat checksums.txt
    
    - name: Generate Release Notes
      id: release_notes
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            echo "## What's Changed" > release_notes.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "- Native macOS DVD ripping application with CSS decryption" >> release_notes.md
          fi
        else
          echo "## Development Build" > release_notes.md
          echo "- Latest development build from commit ${{ github.sha }}" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "1. Download the DMG file" >> release_notes.md
        echo "2. Open the DMG and drag AutoRip2MKV to Applications" >> release_notes.md
        echo "3. Install FFmpeg: \`brew install ffmpeg\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Checksums" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        cat checksums.txt >> release_notes.md
        echo "\`\`\`" >> release_notes.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: AutoRip2MKV ${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'alpha') }}
        files: |
          AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}.dmg
          AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}.zip
          checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew-update:
    name: Update Homebrew Formula
    runs-on: macos-latest
    needs: build-and-release
    # Only run for stable releases (HOMEBREW_TOKEN check removed due to GitHub Actions limitations)
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')
    
    steps:
    - name: Check if Homebrew tap exists
      id: check_tap
      continue-on-error: true
      run: |
        # Check if our Homebrew tap repository exists
        curl -s -f -o /dev/null https://api.github.com/repos/gmoyle/homebrew-autorip2mkv || exit 1
        echo "tap_exists=true" >> $GITHUB_OUTPUT
    
    - name: Update Homebrew Formula
      if: steps.check_tap.outputs.tap_exists == 'true'
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: autorip2mkv-mac
        tag: ${{ github.ref }}
        revision: ${{ github.sha }}
    
    - name: Create Homebrew Formula (if tap doesn't exist)
      if: steps.check_tap.outputs.tap_exists != 'true'
      run: |
        echo "‚ÑπÔ∏è Homebrew tap does not exist yet."
        echo "üìù To create a Homebrew formula later:"
        echo "1. Create repository: gmoyle/homebrew-autorip2mkv"
        echo "2. Add HOMEBREW_TOKEN secret to this repository"
        echo "3. The formula will be automatically updated on future releases"
