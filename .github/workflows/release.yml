name: Release

permissions:
  contents: write
  actions: read
  packages: write
  pull-requests: write
  issues: write

on:
  push:
    tags:
      - 'v*'  # Only trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering for testing

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  build-matrix:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: universal
            platform: macOS
            executable: AutoRip2MKV-Mac
          - os: ubuntu-latest
            arch: x86_64
            platform: Linux
            executable: AutoRip2MKV-Linux
          - os: windows-latest
            arch: x86_64
            platform: Windows
            executable: AutoRip2MKV-Windows.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Setup Xcode (macOS only)
      if: matrix.os == 'macos-latest'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
    
    - name: Setup Swift (Linux/Windows)
      if: matrix.os != 'macos-latest'
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: '5.8'
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Run Tests
      run: swift test
    
    - name: Build Release Binary (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        swift build -c release --arch arm64 --arch x86_64
    
    - name: Build Release Binary (Linux/Windows)
      if: matrix.os != 'macos-latest'
      run: |
        swift build -c release
    
    - name: Create macOS App Bundle
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p "AutoRip2MKV.app/Contents/MacOS"
        mkdir -p "AutoRip2MKV.app/Contents/Resources"
        
        # Copy binary
        cp .build/apple/Products/Release/AutoRip2MKV-Mac "AutoRip2MKV.app/Contents/MacOS/"
        
        # Create Info.plist
        cat > "AutoRip2MKV.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>AutoRip2MKV-Mac</string>
            <key>CFBundleIdentifier</key>
            <string>com.gmoyle.autorip2mkv</string>
            <key>CFBundleName</key>
            <string>AutoRip2MKV</string>
            <key>CFBundleDisplayName</key>
            <string>AutoRip2MKV for Mac</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ steps.get_version.outputs.VERSION_NUMBER }}</string>
            <key>CFBundleVersion</key>
            <string>${{ steps.get_version.outputs.VERSION_NUMBER }}</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleSignature</key>
            <string>????</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
        </dict>
        </plist>
        EOF
    
    - name: Prepare Binary for Distribution
      run: |
        # Create distribution directory
        mkdir -p dist
        
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # Copy the binary from the universal build
          cp .build/apple/Products/Release/AutoRip2MKV-Mac dist/${{ matrix.executable }}
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Copy Windows executable
          cp .build/x86_64-unknown-windows-msvc/release/AutoRip2MKV-Mac.exe dist/${{ matrix.executable }}
        else
          # Copy Linux executable
          cp .build/x86_64-unknown-linux-gnu/release/AutoRip2MKV-Mac dist/${{ matrix.executable }}
        fi
        
        # Make executable (for Linux/macOS)
        chmod +x dist/${{ matrix.executable }}
      shell: bash
    
    - name: Sign App Bundle (Ad-hoc) - macOS only
      if: matrix.os == 'macos-latest'
      run: |
        # Ad-hoc sign the application to make it runnable
        codesign --force --deep --sign - "AutoRip2MKV.app"
        
        # Verify the signature
        codesign --verify --verbose "AutoRip2MKV.app"
        
        # Display signing information
        codesign --display --verbose "AutoRip2MKV.app"
    
    - name: Create DMG - macOS only
      if: matrix.os == 'macos-latest'
      run: |
        # Create a temporary directory for DMG contents
        mkdir dmg_contents
        cp -R AutoRip2MKV.app dmg_contents/
        
        # Create symlink to Applications folder
        ln -s /Applications dmg_contents/Applications
        
        # Create DMG
        hdiutil create -volname "AutoRip2MKV ${{ steps.get_version.outputs.VERSION }}" \
          -srcfolder dmg_contents \
          -ov -format UDZO \
          "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS.dmg"
    
    - name: Create Platform-Specific Archive
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # Create ZIP for macOS app bundle
          zip -r "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS.zip" AutoRip2MKV.app
          # Also create a binary-only archive
          cd dist && zip "../AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS-binary.zip" ${{ matrix.executable }}
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Create ZIP for Windows
          cd dist && zip "../AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-Windows.zip" ${{ matrix.executable }}
        else
          # Create tar.gz for Linux
          cd dist && tar -czf "../AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-Linux.tar.gz" ${{ matrix.executable }}
        fi
      shell: bash
    
    - name: Generate checksums
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          shasum -a 256 "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS.dmg" > checksums-${{ matrix.platform }}.txt
          shasum -a 256 "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS.zip" >> checksums-${{ matrix.platform }}.txt
          shasum -a 256 "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS-binary.zip" >> checksums-${{ matrix.platform }}.txt
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          sha256sum "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-Windows.zip" > checksums-${{ matrix.platform }}.txt
        else
          sha256sum "AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-Linux.tar.gz" > checksums-${{ matrix.platform }}.txt
        fi
        cat checksums-${{ matrix.platform }}.txt
      shell: bash
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.platform }}
        path: |
          AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-*.dmg
          AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-*.zip
          AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-*.tar.gz
          checksums-${{ matrix.platform }}.txt
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-matrix
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.dmg" -exec cp {} release-assets/ \;
        find artifacts -name "*.zip" -exec cp {} release-assets/ \;
        find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
        find artifacts -name "checksums-*.txt" -exec cp {} release-assets/ \;
        
        # Combine all checksums
        cat release-assets/checksums-*.txt > release-assets/checksums.txt
        
        ls -la release-assets/
    
    - name: Generate Release Notes
      id: release_notes
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            echo "## What's Changed" > release_notes.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "- Native macOS DVD ripping application with CSS decryption" >> release_notes.md
          fi
        else
          echo "## Development Build" > release_notes.md
          echo "- Latest development build from commit ${{ github.sha }}" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## 📦 Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🍎 macOS" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Option 1: DMG Installer (Recommended)**" >> release_notes.md
        echo "1. Download \`AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS.dmg\`" >> release_notes.md
        echo "2. Open the DMG and drag AutoRip2MKV to Applications" >> release_notes.md
        echo "3. Install FFmpeg: \`brew install ffmpeg\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Option 2: ZIP Archive**" >> release_notes.md
        echo "1. Download \`AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS.zip\`" >> release_notes.md
        echo "2. Extract and move to Applications folder" >> release_notes.md
        echo "3. Install FFmpeg: \`brew install ffmpeg\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "**macOS Security Notice (First Launch)**" >> release_notes.md
        echo "Since this app isn't notarized by Apple, macOS will prevent it from running initially:" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Right-click (or Control+click) on AutoRip2MKV in Applications" >> release_notes.md
        echo "2. Select \"Open\" from the context menu" >> release_notes.md
        echo "3. Click \"Open\" in the security dialog" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🐧 Linux" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download \`AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-Linux.tar.gz\`" >> release_notes.md
        echo "2. Extract: \`tar -xzf AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-Linux.tar.gz\`" >> release_notes.md
        echo "3. Move to PATH: \`sudo mv AutoRip2MKV-Linux /usr/local/bin/autorip2mkv\`" >> release_notes.md
        echo "4. Install FFmpeg: \`sudo apt install ffmpeg\` (Ubuntu/Debian) or \`sudo dnf install ffmpeg\` (Fedora)" >> release_notes.md
        echo "5. Install libdvdcss for CSS decryption" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🪟 Windows" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download \`AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-Windows.zip\`" >> release_notes.md
        echo "2. Extract to desired location (e.g., C:\\Program Files\\AutoRip2MKV)" >> release_notes.md
        echo "3. Add to PATH or run directly from extracted location" >> release_notes.md
        echo "4. Install FFmpeg from https://ffmpeg.org/download.html" >> release_notes.md
        echo "5. Install libdvdcss for CSS decryption" >> release_notes.md
        echo "" >> release_notes.md
        echo "⚠️ **Note**: All executables are unsigned. This is normal for open-source applications." >> release_notes.md
        echo "" >> release_notes.md
        echo "## Checksums" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        cat release-assets/checksums.txt >> release_notes.md
        echo "\`\`\`" >> release_notes.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: AutoRip2MKV ${{ steps.get_version.outputs.VERSION }} - Multi-Platform Release
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'alpha') }}
        files: |
          release-assets/AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS.dmg
          release-assets/AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS.zip
          release-assets/AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-macOS-binary.zip
          release-assets/AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-Linux.tar.gz
          release-assets/AutoRip2MKV-${{ steps.get_version.outputs.VERSION }}-Windows.zip
          release-assets/checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew-update:
    name: Update Homebrew Formula
    runs-on: macos-latest
    needs: create-release
    # Only run for stable releases (HOMEBREW_TOKEN check removed due to GitHub Actions limitations)
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')
    
    steps:
    - name: Check if Homebrew tap exists
      id: check_tap
      continue-on-error: true
      run: |
        # Check if our Homebrew tap repository exists
        curl -s -f -o /dev/null https://api.github.com/repos/gmoyle/homebrew-autorip2mkv || exit 1
        echo "tap_exists=true" >> $GITHUB_OUTPUT
    
    - name: Update Homebrew Formula
      if: steps.check_tap.outputs.tap_exists == 'true'
      uses: dawidd6/action-homebrew-bump-formula@v5
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: autorip2mkv-mac
        tag: ${{ github.ref }}
        revision: ${{ github.sha }}
    
    - name: Create Homebrew Formula (if tap doesn't exist)
      if: steps.check_tap.outputs.tap_exists != 'true'
      run: |
        echo "ℹ️ Homebrew tap does not exist yet."
        echo "📝 To create a Homebrew formula later:"
        echo "1. Create repository: gmoyle/homebrew-autorip2mkv"
        echo "2. Add HOMEBREW_TOKEN secret to this repository"
        echo "3. The formula will be automatically updated on future releases"
