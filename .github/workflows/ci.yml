name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    
    strategy:
      matrix:
        xcode: ['15.1', '15.0']
        swift: ['5.9']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ matrix.xcode }}
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Swift Version
      run: swift --version
    
    - name: Build Debug
      run: swift build -v
    
    - name: Run Tests
      run: swift test --enable-code-coverage
    
    - name: Generate Code Coverage Report
      run: |
        xcrun llvm-cov export -format="lcov" \
          .build/debug/AutoRip2MKV-MacPackageTests.xctest/Contents/MacOS/AutoRip2MKV-MacPackageTests \
          -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: coverage.lcov
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-release:
    name: Build Release
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.1'
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build Release
      run: swift build -c release -v
    
    - name: Create Archive
      run: |
        mkdir -p release
        cp .build/release/AutoRip2MKV-Mac release/
        tar -czf AutoRip2MKV-Mac-${{ github.sha }}.tar.gz -C release .
    
    - name: Upload Release Artifact
      uses: actions/upload-artifact@v3
      with:
        name: AutoRip2MKV-Mac-${{ github.sha }}
        path: AutoRip2MKV-Mac-${{ github.sha }}.tar.gz
        retention-days: 30

  lint:
    name: SwiftLint
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: swiftlint lint --reporter github-actions-logging

  security-scan:
    name: Security Scan
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        # Check for common security issues in Swift code
        grep -r "NSLog\|print\|debugPrint" Sources/ || true
        
        # Check for hardcoded secrets (basic check)
        grep -r -i "password\|secret\|key\|token" Sources/ --exclude-dir=.git || true
        
        # Check for unsafe file operations
        grep -r "FileManager.*removeItem\|FileManager.*createFile" Sources/ || true

  compatibility:
    name: macOS Compatibility
    runs-on: macos-latest
    
    strategy:
      matrix:
        deployment-target: ['13.0', '14.0']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.1'
    
    - name: Test Deployment Target ${{ matrix.deployment-target }}
      run: |
        echo "Testing deployment target: ${{ matrix.deployment-target }}"
        # Basic build test - deployment target verification
        swift build
        echo "âœ… Build successful for deployment target ${{ matrix.deployment-target }}"
